// ShitRust Command-Line Calculator
// This program demonstrates basic input/output and arithmetic operations

// Import standard input/output library
import { stdin, stdout } from "std/io";

// Function to display welcome message and instructions
fn show_welcome() -> void {
    println("===== ShitRust Calculator =====");
    println("Enter an expression with two numbers and an operator.");
    println("Example: 5 + 3");
    println("Supported operators: +, -, *, /");
    println("Type 'exit' to quit.");
    println("==============================");
}

// Function to parse user input and extract operation components
fn parse_input(input: string) -> result<(float, string, float), string> {
    // Trim input and split by spaces
    let trimmed = input.trim();
    let parts = trimmed.split(" ");
    
    if parts.length() != 3 {
        return err("Invalid input format. Please use: number operator number");
    }
    
    // Parse the first number
    let first_num = parts[0].parse_float();
    if first_num.is_err() {
        return err("Invalid first number");
    }
    
    // Get the operator
    let operator = parts[1];
    if operator != "+" && operator != "-" && operator != "*" && operator != "/" {
        return err("Invalid operator. Use +, -, *, or /");
    }
    
    // Parse the second number
    let second_num = parts[2].parse_float();
    if second_num.is_err() {
        return err("Invalid second number");
    }
    
    return ok((first_num.unwrap(), operator, second_num.unwrap()));
}

// Function to perform the calculation
fn calculate(a: float, op: string, b: float) -> result<float, string> {
    match op {
        "+" => return ok(a + b),
        "-" => return ok(a - b),
        "*" => return ok(a * b),
        "/" => {
            if b == 0.0 {
                return err("Division by zero is not allowed");
            }
            return ok(a / b);
        },
        _ => return err("Unsupported operator")
    }
}

// Main function
fn main() -> void {
    show_welcome();
    
    // Main program loop
    let mut running = true;
    while (running) {
        // Prompt for input
        print("> ");
        let input = stdin.read_line();
        
        // Check for exit command
        if input.trim().to_lowercase() == "exit" {
            println("Goodbye!");
            running = false;
            continue;
        }
        
        // Parse input and calculate
        let parse_result = parse_input(input);
        
        match parse_result {
            ok((a, op, b)) => {
                let calc_result = calculate(a, op, b);
                
                match calc_result {
                    ok(result) => {
                        println("Result: " + result.to_string());
                    },
                    err(error_msg) => {
                        println("Error: " + error_msg);
                    }
                }
            },
            err(error_msg) => {
                println("Error: " + error_msg);
            }
        }
        
        println(""); // Empty line for better readability
    }
} 